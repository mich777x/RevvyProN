generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // use POOL (serverless) in prod
  directUrl = env("DIRECT_URL") // use DIRECT (non-pooled) for migrations
}

model Product {
  id        String     @id @default(cuid())
  title     String
  handle    String     @unique
  imageUrl  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  creatives Creative[]
}

model Creative {
  id          String          @id @default(cuid())
  productId   String
  product     Product         @relation(fields: [productId], references: [id])
  headline    String
  primary     String
  description String
  imagePrompt String?
  viralScore  Int             @default(0)
  wins        Int             @default(0)
  losses      Int             @default(0)
  ctr         Float?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  runs        PredictionRun[]
}

model PredictionRun {
  id         String   @id @default(cuid())
  creativeId String
  creative   Creative @relation(fields: [creativeId], references: [id])
  cpc        Float?
  cpa        Float?
  roi        Float?
  notes      String?
  createdAt  DateTime @default(now())
}

model TuningJob {
  id         String    @id @default(cuid())
  status     String    @default("PENDING") // PENDING|RUNNING|DONE|FAILED
  reason     String?
  createdAt  DateTime  @default(now())
  finishedAt DateTime?
}

model Affiliate {
  id           String        @id @default(cuid())
  userEmail    String        @unique
  refCode      String        @unique
  earnings     Float         @default(0)
  createdAt    DateTime      @default(now())
  referrals    Referral[]
  weeklyPoints Int           @default(0)
  lastWeekRank Int?
  bonuses      WeeklyBonus[]
}

model AffiliateLead {
  id        String   @id @default(cuid())
  email     String   @unique
  audience  String?
  notes     String?
  createdAt DateTime @default(now())
}

model Referral {
  id          String    @id @default(cuid())
  affiliateId String
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])
  visitorIp   String?
  converted   Boolean   @default(false)
  amount      Float?
  createdAt   DateTime  @default(now())
}

model PayoutTier {
  id        String @id @default(cuid())
  name      String
  percent   Int
  threshold Int    @default(0)
}

model WeeklyBonus {
  id          String    @id @default(cuid())
  affiliateId String
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])
  weekStart   DateTime // Monday 00:00:00 UTC (normalized)
  rank        Int
  bonusAmount Float
  paid        Boolean   @default(false)
  createdAt   DateTime  @default(now())

  @@unique([affiliateId, weekStart])
  @@index([weekStart])
}
